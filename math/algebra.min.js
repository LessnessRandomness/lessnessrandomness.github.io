/*
The MIT License (MIT)

Copyright (c) 2017 Nicole White

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
/* taken from https://github.com/nicolewhite/algebra.js/blob/master/build/algebra-0.2.6.js and modified */

BigInt.prototype.toJSON=function(){return this.toString()};var textNode=function(t){return document.createTextNode(t.toString())};class MathML{constructor(t,e=[],n={}){var r,i=document.createElementNS("http://www.w3.org/1998/Math/MathML",t);if(Array.isArray(e))for(r=0;r<e.length;r++)i.appendChild(e[r]);else i.appendChild(e);for(r in n)i.setAttribute(r,n[r]);return i}static row(t){return new MathML("mrow",t)}static done(t,e=!1){var n,r={xmlns:"http://www.w3.org/1998/Math/MathML"};if(e&&(r.display="block"),!Array.isArray(t))return new MathML("math",new MathML("mrow",t),r);if(0===t.length)throw"Empty MathML formula";if(1===t.length)return n=new MathML("mrow",t[0]),new MathML("math",n,r);if(t.length>1){var i=t=>new MathML("mtr",new MathML("mtd",t));return n=new MathML("mtable",t.map(i),{columnalign:"left",linebreak:"true"}),new MathML("math",n,r)}}}function gcd(t,e){for(;0n!==e;){var n=t;t=e,e=n%e}return t}function lcm(t,e){return t*e/gcd(t,e)}BigInt.prototype.toMathML=function(){if(this>=0n)return new MathML("mn",textNode(this));var t=new MathML("mn",textNode(-this)),e=new MathML("mo",textNode("-"));return MathML.row([e,t])};class Fraction{constructor(t,e=1n){if(t=BigInt(t),0n===(e=BigInt(e)))throw EvalError("Divide By Zero");return this.numer=t,this.denom=e,this}copy(){return new Fraction(this.numer,this.denom)}reduce(){var t=this.copy(),e=gcd(t.numer,t.denom);return t.numer=t.numer/e,t.denom=t.denom/e,t.denom<0n&&t.numer>0n&&(t.numer=-t.numer,t.denom=-t.denom),t}equalTo(t){if(!(t instanceof Fraction))return!1;var e=this.reduce(),n=t.reduce();return e.numer===n.numer&&e.denom===n.denom}add(t,e=!0){t instanceof Fraction?(n=t.numer,r=t.denom):(n=t,r=1);var n,r,i=this.copy();if(this.denom==r)i.numer+=n;else{var o=lcm(i.denom,r),a=o/i.denom,s=o/r;i.numer*=a,i.denom*=a,n*=s,i.numer+=n}return e?i.reduce():i}substract(t,e=!0){var n=this.copy();return t instanceof Fraction?n.add(new Fraction(-t.numer,t.denom),e):n.add(new Fraction(-t,1),e)}multiply(t,e=!0){t instanceof Fraction?(n=t.numer,r=t.denom):(n=t,r=1n);var n,r,i=this.copy();return i.numer*=n,i.denom*=r,e?i.reduce():i}divide(t,e=!0){if(0n===t.numer)throw EvalError("Divide By Zero");var n=this.copy();return t instanceof Fraction?n.multiply(new Fraction(t.denom,t.numer),e):n.multiply(new Fraction(1,t),e)}pow(t,e=!0){var n=this.copy();return e&&(n=n.reduce()),n.numer=n.numer**t,n.denom=n.denom**t,n}abs(){var t=this.copy();return t.numer<0n&&(t.numer=-t.numer),t.denom<0n&&(t.denom=-t.denom),t}toMathML(){if(0n===this.numer)return[new MathML("mn",textNode(0n))];if(1n===this.denom&&this.numer>0n)return[new MathML("mn",textNode(this.numer))];if(1n===this.denom&&this.numer<0n)return[new MathML("mo",textNode("-")),new MathML("mn",textNode(-this.numer))];if(this.numer>0n){var t=new MathML("mo",textNode(this.numer)),e=new MathML("mo",textNode(this.denom));return[new MathML("mfrac",[t,e])]}var t=new MathML("mo",textNode(-this.numer)),e=new MathML("mo",textNode(this.denom)),n=new MathML("mfrac",[t,e]);return[new MathML("mo",textNode("-")),n]}}class Variable{constructor(t,e=1n){this.variable=t,this.degree=e}copy(){return new Variable(this.variable,this.degree)}static defaultVariables(t){var e=t.variable,n=t.degree;if(1n===n){var r=new MathML("mi",textNode("x")),i=new MathML("mn",textNode(e));return new MathML("msub",[r,i])}var r=new MathML("mi",textNode("x")),o=new MathML("mn",textNode(e)),i=new MathML("mn",textNode(n));return new MathML("msubsup",[r,o,i])}toMathML(t=Variable.defaultVariables){if(0n!==this.degree)return t(this)}}class Term{constructor(t){if(void 0===t)this.variables=[];else if(t instanceof Variable)this.variables=[t.copy()];else throw TypeError("Invalid Argument ("+t.toString()+"): Term initializer must be of type Variable.");this.coefficients=[new Fraction(1n)]}coefficient(){return this.coefficients.reduce(function(t,e){return t.multiply(e)},new Fraction(1n))}copy(){var t=new Term;return t.coefficients=this.coefficients.map(function(t){return t.copy()}),t.variables=this.variables.map(function(t){return t}),t}combineVars(){for(var t={},e=0;e<this.variables.length;e++){var n=this.variables[e];n.variable in t?t[n.variable]+=n.degree:t[n.variable]=n.degree}var r=[];for(var i in t){var o=new Variable(i,t[i]);r.push(o)}return this.variables=r,this}simplify(){var t=this.copy();return t.coefficients=[this.coefficient()],t.combineVars(),t}canBeCombinedWith(t){var e=this.variables,n=t.variables;if(e.length!=n.length)return!1;for(var r=0,i=0;i<e.length;i++)for(var o=0;o<n.length;o++)e[i].variable===n[o].variable&&e[i].degree===n[o].degree&&(r+=1);return r===e.length}add(t){if(t instanceof Term&&this.canBeCombinedWith(t)){var e=this.copy();return e.coefficients=[e.coefficient().add(t.coefficient())],e}throw TypeError("Invalid Argument ("+t.toString()+"): Summand must be of type Term.")}substract(t){if(t instanceof Term&&this.canBeCombinedWith(t)){var e=this.copy();return e.coefficients=[e.coefficient().substract(t.coefficient())],e}throw TypeError("Invalid Argument ("+t.toString()+"): Subtrahend must be of type Term.")}multiply(t,e=!0){var n=this.copy();if(t instanceof Term)n.variables=n.variables.concat(t.variables),n.coefficients=n.coefficients.concat(t.coefficients);else if(t instanceof Fraction||"bigint"==typeof t){var r=t instanceof BigInt?new Fraction(t):t;0===n.variables.length?n.coefficients.push(r):n.coefficients.unshift(r)}else throw TypeError("Invalid Argument ("+t.toString()+"): Multiplicand must be of type Term, Fraction or BigInt.");return e?n.simplify():n}divide(t,e=!0){if(t instanceof Fraction||"bigint"==typeof t){var n=this.copy();return n.coefficients=n.coefficients.map(function(n){return n.divide(t,e)}),n}throw TypeError("Invalid Argument ("+t.toString()+"): Argument must be of type Fraction or BigInt.")}hasVariable(t){for(var e=0;e<this.variables.length;e++)if(this.variables[e].variable===t)return!0;return!1}maxDegree(){return this.variables.reduce(function(t,e){return t<e.degree?e.degree:t},1n)}toMathML(){var t=this.copy().simplify().coefficient(),e=[];return(1n!==t.abs().numer||1n!==t.abs().denom)&&(e=t.toMathML()),e=this.variables.reduce(function(t,e){return t.concat(e.toMathML())},e)}}class Expression{constructor(t){if(this.constants=[],t instanceof Variable){var e=new Term(t);this.terms=[e]}else if("bigint"==typeof t)this.constants=[new Fraction(t)],this.terms=[];else if(t instanceof Fraction)this.constants=[t],this.terms=[];else if(t instanceof Term)this.terms=[t];else if(void 0===t)this.terms=[];else throw TypeError("Invalid Argument ("+t.toString()+"): Argument must be of type Variable, BigInt, Fraction or Term.")}copy(){var t=new Expression;return t.constants=this.constants.map(function(t){return t.copy()}),t.terms=this.terms.map(function(t){return t.copy()}),t}constant(){return this.constants.reduce(function(t,e){return t.add(e)},new Fraction(0n))}removeTermsWithCoefficientZero(){return this.terms=this.terms.filter(function(t){return 0n!==t.coefficient().reduce().numer}),this}combineLikeTerms(){function t(t,e){for(var n=0;n<e.length;n++)if(t.canBeCombinedWith(e[n]))return!0;return!1}for(var e=[],n=[],r=0;r<this.terms.length;r++){var i=this.terms[r];if(!t(i,n)){for(var o=r+1;o<this.terms.length;o++){var a=this.terms[o];i.canBeCombinedWith(a)&&(i=i.add(a))}e.push(i),n.push(i)}}return this.terms=e,this}moveTermsWithDegreeZeroToConstants(){for(var t=[],e=new Fraction(0n),n=0;n<this.terms.length;n++){var r=this.terms[n];0===r.variables.length?e=e.add(r.coefficient()):t.push(r)}return this.constants.push(e),this.terms=t,this}sort(){return this.terms=this.terms.sort(function t(e,n){var r=e.maxDegree(),i=n.maxDegree();if(r!==i)return i-r;var o=e.variables.length;return n.variables.length-o}),this}simplify(){var t=this.copy();return t.terms=t.terms.map(function(t){return t.simplify()}),t.sort(),t.combineLikeTerms(),t.moveTermsWithDegreeZeroToConstants(),t.removeTermsWithCoefficientZero(),t.constants=0n===t.constant().numer?[]:[t.constant()],t}add(t,e=!0){var n=this.copy();if(t instanceof Variable||t instanceof Term||"bigint"==typeof t||t instanceof Fraction){var r=new Expression(t);return n.add(r,e)}if(t instanceof Expression){var i=t.copy().terms;n.terms=n.terms.concat(i),n.constants=n.constants.concat(t.constants),n.sort()}else throw TypeError("Invalid Argument ("+t.toString()+"): Summand must be of type Variable, Expression, Term, Fraction or BigInt.");return e?n.simplify():n}subtract(t,e=!0){var n=t instanceof Expression?t.multiply(-1n):new Expression(t).multiply(-1n);return this.add(n,e)}multiply(t,e=!0){var n=this.copy();if(t instanceof Variable||t instanceof Term||"bigint"==typeof t||t instanceof Fraction){var r=new Expression(t);return n.multiply(r,e)}if(t instanceof Expression){for(var i=t.copy(),o=[],a=0;a<n.terms.length;a++){for(var s=n.terms[a],c=0;c<i.terms.length;c++){var m=i.terms[c];o.push(s.multiply(m,e))}for(var c=0;c<i.constants.length;c++)o.push(s.multiply(i.constants[c],e))}for(var a=0;a<i.terms.length;a++)for(var m=i.terms[a],c=0;c<n.constants.length;c++)o.push(m.multiply(n.constants[c],e));for(var a=0;a<n.constants.length;a++)for(var h=n.constants[a],c=0;c<i.constants.length;c++){var u=i.constants[c],f=new Term;f=(f=f.multiply(u,!1)).multiply(h,!1),o.push(f)}n.constants=[],n.terms=o,n.sort()}else throw TypeError("Invalid Argument ("+t.toString()+"): Multiplicand must be of type Variable, Expression, Term, Fraction or BigInt.");return e?n.simplify():n}divide(t,e=!0){if(t instanceof Fraction||"bigint"==typeof t){if(t instanceof Fraction&&0n===t.numer||"bigint"==typeof t&&0n===t)throw EvalError("Divide By Zero");for(var n=this.copy(),r=0;r<n.terms.length;r++)for(var i=n.terms[r],o=0;o<i.coefficients.length;o++)i.coefficients[o]=i.coefficients[o].divide(t,e);return n.constants=n.constants.map(function(n){return n.divide(t,e)}),n}throw TypeError("Invalid Argument ("+t.toString()+"): Divisor must be of type Fraction or BigInt.")}pow(t,e=!0){if("bigint"==typeof t){var n=this.copy();if(0n===t)return new Expression().add(1);for(var r=1n;r<t;r++)n=n.multiply(this,e);return n.sort(),e?n.simplify():n}throw TypeError("Invalid Argument ("+t.toString()+"): Exponent must be of type BigInt.")}toMathML(){for(var t=[],e=!1,n=0;n<this.terms.length;n++){var r=this.terms[n];e?t.push(r.coefficients[0].numer<0n?new MathML("mo",textNode("-")):new MathML("mo",textNode("+"))):(e=!0,r.coefficients[0].numer<0n&&t.push(new MathML("mo",textNode("-")))),t=t.concat(r.toMathML())}for(var n=0;n<this.constants.length;n++){var i=this.constants[n];e?t.push(i.numer<0n?new MathML("mo",textNode("-")):new MathML("mo",textNode("+"))):(e=!0,i.numer<0n&&t.push(new MathML("mo",textNode("-")))),t=t.concat(i.abs().toMathML())}return 0===t.length?new MathML("mn",textNode("0")):t}}